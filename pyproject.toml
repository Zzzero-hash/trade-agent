[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | \.pytest_cache
  | ray_results
  | optimization_results
  | experiments
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["src"]
known_third_party = [
    "numpy", "pandas", "torch", "ray", "gymnasium", "yfinance",
    "ta", "scipy", "matplotlib", "seaborn", "plotly", "pytest",
    "pyyaml", "tqdm", "wandb", "optuna", "sklearn", "backtrader"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["*/__init__.py"]
force_sort_within_sections = true

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".pytest_cache",
    "ray_results",
    "optimization_results",
    "experiments",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # assert statements in tests
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "ray.*",
    "yfinance.*",
    "ta.*",
    "gymnasium.*",
    "wandb.*",
    "optuna.*",
    "plotly.*",
    "seaborn.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests/unit", "tests/integration", "tests/performance", "tests/smoke"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=json:coverage.json",
    "--cov-fail-under=90",
    "--durations=10",
    "--maxfail=5",
    "--junitxml=test-results.xml",
    "-p", "no:warnings",
    "--disable-warnings",
]
markers = [
    "unit: mark as unit test (fast, isolated)",
    "integration: mark as integration test (components working together)",
    "slow: mark as slow running test (>5 seconds)",
    "gpu: mark as requiring GPU hardware",
    "network: mark as requiring network access",
    "ray: mark as requiring Ray cluster",
    "ml: mark as requiring ML dependencies (PyTorch, etc.)",
    "smoke: mark as smoke test for CI pipeline",
    "e2e: mark as end-to-end test (full pipeline)",
    "regression: mark as regression test",
    "performance: mark as performance test",
    "memory: mark as memory usage test",
    "security: mark as security test",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
    "ignore::UserWarning:ray.*",
    "ignore::UserWarning:gymnasium.*",
    "ignore::RuntimeWarning",
    "error::UserWarning:src.*",
]
norecursedirs = [
    ".git",
    ".pytest_cache",
    "__pycache__",
    "*.egg-info",
    "build",
    "dist",
    ".venv",
    "venv",
    "env",
    "ray_results",
    "optimization_results",
    "experiments",
    "htmlcov",
]
minversion = "7.0"

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
    "setup.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "docs", "build", "dist"]
skips = ["B101", "B601", "B102", "B108", "B324", "B506", "B614"]  # Skip assert_used, shell commands, weak cryptography, unsafe PyTorch load, etc.

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"
