name: ArgoCD Sync

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'k8s/**'
      - 'src/**'
      - 'Dockerfile*'
      - '.github/workflows/argocd-sync.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'k8s/**'
      - 'src/**'
      - 'Dockerfile*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
      force_sync:
        description: 'Force sync even if no changes'
        required: false
        default: false
        type: boolean

env:
  ARGOCD_SERVER: argocd.trading-system.local
  ARGOCD_NAMESPACE: argocd

jobs:
  # Build and push Docker image
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Update Kubernetes manifests with new image tag
  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update image tags in manifests
        run: |
          # Get the image tag from the build job
          IMAGE_TAG="${{ needs.build-and-push.outputs.image_tag }}"

          # Update image tags in all deployment files
          find k8s -name "*-deployment.yaml" -type f -exec sed -i "s|image:.*trade-agent.*|image: ${IMAGE_TAG}|g" {} \;

          # Update image tag in configmap if it exists
          if [ -f "k8s/configmap.yaml" ]; then
            sed -i "s|imageTag:.*|imageTag: ${IMAGE_TAG}|g" k8s/configmap.yaml
          fi

          echo "Updated image tag to: ${IMAGE_TAG}"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/
          git commit -m "Update image tags to ${{ needs.build-and-push.outputs.image_tag }} [skip ci]" || exit 0
          git push

  # Sync ArgoCD applications
  argocd-sync:
    needs: [build-and-push, update-manifests]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Get ArgoCD admin password
        run: |
          # Get admin password from Kubernetes secret
          kubectl config set-cluster k8s --server="${{ secrets.KUBE_CONFIG_DATA }}"
          kubectl config set-credentials admin --token="${{ secrets.KUBE_TOKEN }}"
          kubectl config set-context default --cluster=k8s --user=admin
          kubectl config use-context default

          ADMIN_PASSWORD=$(kubectl -n $ARGOCD_NAMESPACE get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "ADMIN_PASSWORD=$ADMIN_PASSWORD" >> $GITHUB_ENV

      - name: Login to ArgoCD
        run: |
          argocd login $ARGOCD_SERVER \
            --username admin \
            --password "$ADMIN_PASSWORD" \
            --insecure \
            --grpc-web

      - name: Sync applications
        run: |
          # Determine which applications to sync based on environment
          if [ "${{ github.event.inputs.environment }}" = "production" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            APPS="trading-system production-core-services production-networking production-monitoring"
          else
            APPS="staging-core-services staging-networking staging-monitoring"
          fi

          for app in $APPS; do
            echo "Syncing application: $app"

            if [ "${{ github.event.inputs.force_sync }}" = "true" ]; then
              argocd app sync $app --prune --force
            else
              argocd app sync $app --prune
            fi

            # Wait for sync to complete
            argocd app wait $app --health --timeout=300
          done

      - name: Check application health
        run: |
          # Check health of all applications
          argocd app list --output wide

          # Get detailed health status
          for app in $(argocd app list -o name); do
            echo "Health status for $app:"
            argocd app get $app --output yaml | grep -A 5 "health:"
          done

  # Notify deployment status
  notify:
    needs: [argocd-sync]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#trading-deployments'
          text: |
            Trading System Deployment
            Environment: ${{ github.event.inputs.environment || 'auto' }}
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback on failure
  rollback:
    needs: [argocd-sync]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Get ArgoCD admin password
        run: |
          kubectl config set-cluster k8s --server="${{ secrets.KUBE_CONFIG_DATA }}"
          kubectl config set-credentials admin --token="${{ secrets.KUBE_TOKEN }}"
          kubectl config set-context default --cluster=k8s --user=admin
          kubectl config use-context default

          ADMIN_PASSWORD=$(kubectl -n $ARGOCD_NAMESPACE get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "ADMIN_PASSWORD=$ADMIN_PASSWORD" >> $GITHUB_ENV

      - name: Login to ArgoCD
        run: |
          argocd login $ARGOCD_SERVER \
            --username admin \
            --password "$ADMIN_PASSWORD" \
            --insecure \
            --grpc-web

      - name: Rollback applications
        run: |
          echo "Deployment failed, rolling back..."

          # Rollback all production applications
          for app in trading-system production-core-services production-networking production-monitoring; do
            echo "Rolling back $app"
            argocd app rollback $app || echo "Rollback failed for $app"
          done

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#trading-deployments'
          text: |
            ðŸš¨ Trading System Deployment Failed - Rollback Initiated
            Environment: Production
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Action: Automatic rollback performed
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
