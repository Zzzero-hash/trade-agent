name: Enhanced Trading RL Agent CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better caching

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Upgrade pip and install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -e .

    - name: Install pre-commit hooks
      run: |
        pre-commit install
        pre-commit install --hook-type commit-msg

    - name: Run pre-commit on all files
      run: pre-commit run --all-files

    - name: Run linting with ruff
      run: |
        ruff check .
        ruff format --check .

    - name: Run type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run unit tests with pytest
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run smoke tests
      run: |
        pytest tests/smoke/ -v -m smoke

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: false
        verbose: true

  docker-build-and-test:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: trade-agent:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Test Docker image
      run: |
        # Test that the container can start and run basic commands
        docker run --rm trade-agent:${{ github.sha }} python --version
        docker run --rm trade-agent:${{ github.sha }} pip list | grep trade-agent

    - name: Run smoke tests in Docker
      run: |
        # Run smoke tests inside the container
        docker run --rm trade-agent:${{ github.sha }} pytest tests/smoke/ -v -m smoke

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -e .

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --timeout=300

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -e .

    - name: Build documentation
      run: |
        if [ -f "docs/Makefile" ]; then
          make -C docs html
          make -C docs linkcheck
        else
          echo "No docs/Makefile found, skipping documentation build"
        fi

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/
        if-no-files-found: ignore

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -e .

    - name: Run performance benchmarks
      run: |
        # Run any benchmark tests if they exist
        if [ -d "tests/benchmarks" ]; then
          pytest tests/benchmarks/ -v --benchmark-only
        else
          echo "No benchmark tests found, skipping performance tests"
        fi

  final-status:
    name: Final Status
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build-and-test, integration-tests, security-scan, build-docs, performance-benchmark]
    if: always()

    steps:
    - name: Check job status
      run: |
        echo "All jobs completed!"
        echo "Lint and Test: ${{ needs.lint-and-test.result }}"
        echo "Docker Build and Test: ${{ needs.docker-build-and-test.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Build Docs: ${{ needs.build-docs.result }}"
        echo "Performance Benchmark: ${{ needs.performance-benchmark.result }}"

        # Fail if any required jobs failed
        if [[ "${{ needs.lint-and-test.result }}" == "failure" ]] || \
           [[ "${{ needs.docker-build-and-test.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "Critical jobs failed!"
          exit 1
        fi
