name: Documentation Build and Deploy

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'requirements*.txt'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'requirements*.txt'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild documentation'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    outputs:
      docs-built: ${{ steps.build.outputs.success }}
      docs-path: ${{ steps.build.outputs.docs-path }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: pip-docs-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements-core.txt

    - name: Build documentation
      id: build
      run: |
        cd docs
        python build_docs.py --clean
        if [ $? -eq 0 ]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "docs-path=docs/_build/html" >> $GITHUB_OUTPUT
        else
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: documentation-${{ github.sha }}
        path: docs/_build/html/
        retention-days: 30

    - name: Run documentation quality checks
      if: success()
      run: |
        cd docs
        python build_docs.py --check

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && needs.build-docs.outputs.docs-built == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation-${{ github.sha }}
        path: docs/_build/html/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'docs: update documentation [skip ci]'

  docs-preview:
    name: Documentation Preview
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.event_name == 'pull_request' && needs.build-docs.outputs.docs-built == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation-${{ github.sha }}
        path: docs/_build/html/

    - name: Deploy to Netlify (Preview)
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './docs/_build/html'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 1

  docs-validation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Validate documentation links
      if: needs.build-docs.outputs.docs-built == 'true'
      run: |
        cd docs
        python build_docs.py --check

    - name: Check documentation coverage
      if: needs.build-docs.outputs.docs-built == 'true'
      run: |
        cd docs
        python -c "
        import os
        import sys
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

        # Check if all Python modules have documentation
        import src.trade_agent as tra
        modules_with_docs = []
        modules_without_docs = []

        for root, dirs, files in os.walk('src'):
            for file in files:
                if file.endswith('.py') and not file.startswith('__'):
                    module_path = os.path.join(root, file)
                    rst_file = os.path.join('docs', module_path.replace('.py', '.rst').replace('/', '.'))
                    if os.path.exists(rst_file):
                        modules_with_docs.append(module_path)
                    else:
                        modules_without_docs.append(module_path)

        print(f'Modules with documentation: {len(modules_with_docs)}')
        print(f'Modules without documentation: {len(modules_without_docs)}')

        if modules_without_docs:
            print('\\nModules missing documentation:')
            for module in modules_without_docs[:10]:  # Show first 10
                print(f'  - {module}')
            if len(modules_without_docs) > 10:
                print(f'  ... and {len(modules_without_docs) - 10} more')
        "

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Documentation Build Status')
          );

          const status = '${{ needs.build-docs.outputs.docs-built }}' === 'true' ? '✅' : '❌';
          const buildStatus = '${{ needs.build-docs.outputs.docs-built }}' === 'true' ? 'Success' : 'Failed';
          const coverage = '${{ needs.docs-validation.result }}' === 'success' ? 'Validated' : 'Issues found';
          const buildMessage = '${{ needs.build-docs.outputs.docs-built }}' === 'true' ? '📖 Documentation has been built successfully and is ready for review.' : '⚠️ Documentation build failed. Please check the logs for details.';
          const previewMessage = '${{ github.event_name }}' === 'pull_request' ? '🔍 A preview will be available once deployed.' : '';

          const message = `## Documentation Build Status ${status}

          **Build Status:** ${buildStatus}

          **Coverage:** ${coverage}

          ${buildMessage}

          ${previewMessage}`;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: message
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
          }
