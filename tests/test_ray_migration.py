#!/usr/bin/env python3
"""
Ray RLlib Migration Test Suite
Tests that all Ray Tune and Ray RLlib components work correctly after the TD3 ‚Üí SAC migration.
"""

import os
from pathlib import Path
import sys
import tempfile
import warnings

import pytest

# Add src to path
sys.path.append("/workspaces/trading-rl-agent")


def test_ray_imports():
    """Test that all Ray imports work correctly."""
    print("üîç Testing Ray imports...")

    # Test Ray Tune imports
    from ray import train, tune

    print("‚úÖ Ray Tune and Train imports successful")

    # Test Ray RLlib SAC imports (should work)
    from ray.rllib.algorithms.sac import SACConfig

    print("‚úÖ Ray RLlib SAC imports successful")

    # Test that TD3 imports fail as expected
    try:
        from ray.rllib.algorithms.td3 import TD3Config

        pytest.fail("TD3 should not be available in Ray RLlib 2.38.0+")
    except ImportError:
        print("‚úÖ TD3 correctly unavailable in Ray RLlib (as expected)")


def test_ray_tune_api():
    """Test that Ray Tune API works with new train.report syntax."""
    print("üîç Testing Ray Tune API...")

    import ray
    from ray import train, tune

    if not ray.is_initialized():
        ray.init(ignore_reinit_error=True)

    def test_function(config):
        # Test new train.report syntax
        train.report({"metric": config["x"] ** 2})

    # Test that tune.run works with metric and mode parameters
    analysis = tune.run(
        test_function,
        config={"x": tune.uniform(0, 1)},
        num_samples=2,
        metric="metric",
        mode="min",
        verbose=0,
    )

    # Test that best result access works
    best_result = analysis.get_best_trial("metric", "min").last_result
    assert "metric" in best_result
    print("‚úÖ Ray Tune API test successful")


def test_sac_optimization_redirect():
    """Test that TD3 optimization redirects to SAC with deprecation warning."""
    print("üîç Testing TD3 ‚Üí SAC optimization redirect...")

    from src.optimization.rl_optimization import (
        optimize_sac_hyperparams,
        optimize_td3_hyperparams,
    )

    # Test that TD3 function exists but shows deprecation warning
    with warnings.catch_warnings(record=True) as w:
        warnings.simplefilter("always")

        # This should show a deprecation warning but still work
        env_config = {"test": True}

        # Just test the function exists and shows warning (don't actually run optimization)
        try:
            # Test the function signature and warning
            import inspect

            sig = inspect.signature(optimize_td3_hyperparams)
            assert "env_config" in sig.parameters
            print("‚úÖ TD3 optimization function exists with correct signature")
        except Exception as e:
            print(f"‚ö†Ô∏è  TD3 optimization function test: {e}")


def test_custom_td3_still_works():
    """Test that custom TD3 implementation still works locally."""
    print("üîç Testing custom TD3 implementation...")

    import numpy as np

    from src.agents.configs import TD3Config
    from src.agents.td3_agent import TD3Agent

    # Create custom TD3 agent
    config = TD3Config(
        learning_rate=3e-4, gamma=0.99, tau=0.005, batch_size=32, buffer_capacity=1000
    )

    agent = TD3Agent(config, state_dim=10, action_dim=3)

    # Test action selection
    state = np.random.randn(10).astype(np.float32)
    action = agent.select_action(state, add_noise=False)

    assert len(action) == 3
    assert all(-1.0 <= a <= 1.0 for a in action)
    print("‚úÖ Custom TD3 implementation works correctly")


def test_sac_configuration():
    """Test that SAC configuration works correctly."""
    print("üîç Testing SAC configuration...")

    from ray.rllib.algorithms.sac import SACConfig

    # Test SAC configuration
    config = SACConfig()
    config.training(
        actor_lr=3e-4,
        critic_lr=3e-4,
        alpha_lr=3e-4,
        tau=0.005,
        gamma=0.99,
        twin_q=True,
        target_entropy="auto",
    )

    # Test that config is properly set
    assert config.actor_lr == 3e-4
    assert config.critic_lr == 3e-4
    assert config.alpha_lr == 3e-4
    assert config.twin_q is True
    print("‚úÖ SAC configuration successful")


def test_yaml_config_files():
    """Test that YAML configuration files are properly updated."""
    print("üîç Testing YAML configuration files...")

    import yaml

    config_path = Path("/workspaces/trading-rl-agent/src/configs/model/td3_agent.yaml")
    if config_path.exists():
        with open(config_path) as f:
            config = yaml.safe_load(f)

        # Should contain SAC-specific parameters
        assert (
            "alpha_lr" in config
        ), "Config should contain SAC-specific alpha_lr parameter"
        assert "twin_q" in config, "Config should contain SAC-specific twin_q parameter"
        print("‚úÖ YAML configuration properly updated for SAC")
    else:
        print("‚ö†Ô∏è  YAML config file not found, skipping test")


def test_documentation_exists():
    """Test that migration documentation exists."""
    print("üîç Testing migration documentation...")

    migration_doc = Path("/workspaces/trading-rl-agent/docs/RAY_RLLIB_MIGRATION.md")
    assert migration_doc.exists(), "Migration documentation should exist"

    # Read and check content
    content = migration_doc.read_text()
    assert "TD3" in content, "Documentation should mention TD3"
    assert "SAC" in content, "Documentation should mention SAC"
    assert "migration" in content.lower(), "Documentation should discuss migration"
    print("‚úÖ Migration documentation exists and contains relevant content")


def main():
    """Run all Ray RLlib migration tests."""
    print("üöÄ Starting Ray RLlib Migration Test Suite")
    print("=" * 60)

    tests = [
        test_ray_imports,
        test_ray_tune_api,
        test_sac_optimization_redirect,
        test_custom_td3_still_works,
        test_sac_configuration,
        test_yaml_config_files,
        test_documentation_exists,
    ]

    passed = 0
    failed = 0

    for test_func in tests:
        try:
            test_func()
            passed += 1
        except Exception as e:
            print(f"‚ùå {test_func.__name__} failed: {e}")
            failed += 1
            import traceback

            traceback.print_exc()
        print()

    print("=" * 60)
    print(f"üìä Test Results: {passed} passed, {failed} failed")

    if failed == 0:
        print("üéâ ALL RAY RLLIB MIGRATION TESTS PASSED!")
        return True
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the errors above.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
