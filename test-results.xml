<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="5" skipped="12" tests="62" time="15.356" timestamp="2025-06-24T18:44:18.128859+00:00" hostname="1d6eadd6200c"><testcase classname="tests.test_agent_comprehensive.TestAgentComprehensive" name="test_agent_initialization[td3]" time="2.104" /><testcase classname="tests.test_agent_comprehensive.TestAgentComprehensive" name="test_agent_initialization[sac]" time="0.019" /><testcase classname="tests.test_agent_comprehensive.TestAgentComprehensive" name="test_agent_action_selection[td3]" time="0.023" /><testcase classname="tests.test_agent_comprehensive.TestAgentComprehensive" name="test_agent_action_selection[sac]" time="0.021" /><testcase classname="tests.test_agent_comprehensive.TestAgentComprehensive" name="test_agent_training_pipeline[td3]" time="0.050" /><testcase classname="tests.test_agent_comprehensive.TestAgentComprehensive" name="test_agent_training_pipeline[sac]" time="0.033"><failure message="ValueError: not enough values to unpack (expected 5, got 4)">tests/test_agent_comprehensive.py:278: in test_agent_training_pipeline
    agent.train() if hasattr(agent, "train") else agent.update()
src/agents/sac_agent.py:345: in update
    state, action, reward, next_state, done = self.replay_buffer.sample(
E   ValueError: not enough values to unpack (expected 5, got 4)</failure></testcase><testcase classname="tests.test_agent_comprehensive.TestAgentComprehensive" name="test_agent_save_load[td3]" time="0.020" /><testcase classname="tests.test_agent_comprehensive.TestAgentComprehensive" name="test_agent_save_load[sac]" time="0.017" /><testcase classname="tests.test_agent_comprehensive.TestAgentComprehensive" name="test_agent_configuration_validation" time="0.001" /><testcase classname="tests.test_agent_comprehensive.TestAgentIntegration" name="test_agent_environment_compatibility" time="0.001"><skipped type="pytest.skip" message="Environment integration tests - implement when environment is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive.py:386: Environment integration tests - implement when environment is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive.TestAgentIntegration" name="test_agent_multi_step_training" time="0.001"><skipped type="pytest.skip" message="Multi-step training tests - implement after basic training is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive.py:392: Multi-step training tests - implement after basic training is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive.TestAgentPerformance" name="test_agent_action_selection_speed" time="0.001"><skipped type="pytest.skip" message="Performance tests - implement after basic functionality is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive.py:403: Performance tests - implement after basic functionality is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive.TestAgentPerformance" name="test_agent_training_memory_usage" time="0.001"><skipped type="pytest.skip" message="Memory usage tests - implement after basic functionality is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive.py:408: Memory usage tests - implement after basic functionality is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive_clean.TestAgentComprehensive" name="test_agent_initialization[td3]" time="0.011" /><testcase classname="tests.test_agent_comprehensive_clean.TestAgentComprehensive" name="test_agent_initialization[sac]" time="0.007" /><testcase classname="tests.test_agent_comprehensive_clean.TestAgentComprehensive" name="test_agent_action_selection[td3]" time="0.009" /><testcase classname="tests.test_agent_comprehensive_clean.TestAgentComprehensive" name="test_agent_action_selection[sac]" time="0.009" /><testcase classname="tests.test_agent_comprehensive_clean.TestAgentComprehensive" name="test_agent_training_pipeline[td3]" time="0.022" /><testcase classname="tests.test_agent_comprehensive_clean.TestAgentComprehensive" name="test_agent_training_pipeline[sac]" time="0.045"><failure message="ValueError: not enough values to unpack (expected 5, got 4)">tests/test_agent_comprehensive_clean.py:276: in test_agent_training_pipeline
    agent.train() if hasattr(agent, "train") else agent.update()
src/agents/sac_agent.py:345: in update
    state, action, reward, next_state, done = self.replay_buffer.sample(
E   ValueError: not enough values to unpack (expected 5, got 4)</failure></testcase><testcase classname="tests.test_agent_comprehensive_clean.TestAgentComprehensive" name="test_agent_save_load[td3]" time="0.014" /><testcase classname="tests.test_agent_comprehensive_clean.TestAgentComprehensive" name="test_agent_save_load[sac]" time="0.023" /><testcase classname="tests.test_agent_comprehensive_clean.TestAgentComprehensive" name="test_agent_configuration_validation" time="0.001" /><testcase classname="tests.test_agent_comprehensive_clean.TestAgentIntegration" name="test_agent_environment_compatibility" time="0.001"><skipped type="pytest.skip" message="Environment integration tests - implement when environment is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive_clean.py:384: Environment integration tests - implement when environment is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive_clean.TestAgentIntegration" name="test_agent_multi_step_training" time="0.001"><skipped type="pytest.skip" message="Multi-step training tests - implement after basic training is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive_clean.py:390: Multi-step training tests - implement after basic training is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive_clean.TestAgentPerformance" name="test_agent_action_selection_speed" time="0.001"><skipped type="pytest.skip" message="Performance tests - implement after basic functionality is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive_clean.py:401: Performance tests - implement after basic functionality is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive_clean.TestAgentPerformance" name="test_agent_training_memory_usage" time="0.001"><skipped type="pytest.skip" message="Memory usage tests - implement after basic functionality is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive_clean.py:406: Memory usage tests - implement after basic functionality is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentComprehensive" name="test_agent_initialization[td3]" time="0.012" /><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentComprehensive" name="test_agent_initialization[sac]" time="0.011" /><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentComprehensive" name="test_agent_action_selection[td3]" time="0.015" /><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentComprehensive" name="test_agent_action_selection[sac]" time="0.011" /><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentComprehensive" name="test_agent_training_pipeline[td3]" time="0.030" /><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentComprehensive" name="test_agent_training_pipeline[sac]" time="0.036"><failure message="ValueError: not enough values to unpack (expected 5, got 4)">tests/test_agent_comprehensive_fixed.py:276: in test_agent_training_pipeline
    agent.train() if hasattr(agent, "train") else agent.update()
src/agents/sac_agent.py:345: in update
    state, action, reward, next_state, done = self.replay_buffer.sample(
E   ValueError: not enough values to unpack (expected 5, got 4)</failure></testcase><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentComprehensive" name="test_agent_save_load[td3]" time="0.016" /><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentComprehensive" name="test_agent_save_load[sac]" time="0.014"><failure message="AssertionError: Actions differ: [-0.53682476] vs [-0.29761022]&#10;assert False&#10; +  where False = &lt;function allclose at 0x7f69ad1f56f0&gt;(array([-0.53682476], dtype=float32), array([-0.29761022], dtype=float32), atol=1e-06)&#10; +    where &lt;function allclose at 0x7f69ad1f56f0&gt; = np.allclose">tests/test_agent_comprehensive_fixed.py:338: in test_agent_save_load
    assert np.allclose(
E   AssertionError: Actions differ: [-0.53682476] vs [-0.29761022]
E   assert False
E    +  where False = &lt;function allclose at 0x7f69ad1f56f0&gt;(array([-0.53682476], dtype=float32), array([-0.29761022], dtype=float32), atol=1e-06)
E    +    where &lt;function allclose at 0x7f69ad1f56f0&gt; = np.allclose</failure></testcase><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentComprehensive" name="test_agent_configuration_validation" time="0.001" /><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentIntegration" name="test_agent_environment_compatibility" time="0.001"><skipped type="pytest.skip" message="Environment integration tests - implement when environment is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive_fixed.py:379: Environment integration tests - implement when environment is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentIntegration" name="test_agent_multi_step_training" time="0.000"><skipped type="pytest.skip" message="Multi-step training tests - implement after basic training is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive_fixed.py:385: Multi-step training tests - implement after basic training is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentPerformance" name="test_agent_action_selection_speed" time="0.000"><skipped type="pytest.skip" message="Performance tests - implement after basic functionality is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive_fixed.py:396: Performance tests - implement after basic functionality is stable</skipped></testcase><testcase classname="tests.test_agent_comprehensive_fixed.TestAgentPerformance" name="test_agent_training_memory_usage" time="0.000"><skipped type="pytest.skip" message="Memory usage tests - implement after basic functionality is stable">/workspaces/trading-rl-agent/tests/test_agent_comprehensive_fixed.py:401: Memory usage tests - implement after basic functionality is stable</skipped></testcase><testcase classname="tests.test_backtester_stub" name="test_backtester_stub_methods" time="0.001" /><testcase classname="tests.test_build_datasets" name="test_add_hf_sentiment_merges_scores" time="0.018" /><testcase classname="tests.test_build_datasets" name="test_add_twitter_sentiment_scores" time="0.005" /><testcase classname="tests.test_build_datasets" name="test_integration_hf_and_twitter" time="0.009" /><testcase classname="tests.test_build_datasets" name="test_integration_full_pipeline" time="0.013" /><testcase classname="tests.test_cached_data" name="test_load_cached_csvs" time="0.019" /><testcase classname="tests.test_cached_data" name="test_load_cached_csvs_missing" time="0.001" /><testcase classname="tests.test_candle_patterns" name="test_detect_doji" time="0.003" /><testcase classname="tests.test_candle_patterns" name="test_detect_hammer" time="0.004" /><testcase classname="tests.test_candle_patterns" name="test_detect_inside_bar" time="0.002" /><testcase classname="tests.test_candle_patterns" name="test_detect_outside_bar" time="0.004" /><testcase classname="tests.test_candle_patterns" name="test_detect_engulfing" time="0.005" /><testcase classname="tests.test_candle_patterns" name="test_detect_three_white_soldiers" time="0.005" /><testcase classname="tests.test_candle_patterns" name="test_detect_three_black_crows" time="0.005" /><testcase classname="tests.test_candle_patterns" name="test_detect_harami" time="0.006" /><testcase classname="tests.test_candle_patterns" name="test_compute_candle_stats" time="0.013" /><testcase classname="tests.test_candle_patterns" name="test_compatibility_with_original_detectors" time="0.014" /><testcase classname="tests.test_candle_patterns" name="test_complex_pattern_combination" time="0.044" /><testcase classname="tests.test_cluster_utils" name="test_get_available_devices" time="0.001" /><testcase classname="tests.test_cnn_lstm" name="test_model_instantiation_from_yaml" time="0.010" /><testcase classname="tests.test_cnn_lstm" name="test_forward_pass" time="0.046" /><testcase classname="tests.test_comprehensive_agents.TestAgentInitialization" name="test_dummy" time="0.001" /><testcase classname="tests.test_comprehensive_data_preprocessing.TestFeatureEngineering" name="test_technical_indicators_basic" time="0.002"><failure message="TypeError: compute_ema() got an unexpected keyword argument 'window'">tests/test_comprehensive_data_preprocessing.py:51: in test_technical_indicators_basic
    ema = compute_ema(data["close"], window=5)
E   TypeError: compute_ema() got an unexpected keyword argument 'window'</failure></testcase></testsuite></testsuites>
